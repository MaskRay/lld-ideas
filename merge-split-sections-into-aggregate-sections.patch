From 1f542f886b40fbe555b247effeaf778baa183ff3 Mon Sep 17 00:00:00 2001
From: Fangrui Song <redacted>
Date: Sat, 17 Feb 2024 13:59:52 -0800
Subject: [PATCH] [ELF] Merge splitSections into "Aggregate sections"
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This plan does not work because tg.spawn's overhead is too large.

% hyperfine --warmup 2 --min-runs 25 "numactl -C 20-27 /t/lld"{0,1}" -flavor gnu @response.txt --threads=8"
Benchmark 1: numactl -C 20-27 /t/lld0 -flavor gnu @response.txt --threads=8
  Time (mean ± σ):     492.6 ms ±  10.9 ms    [User: 575.7 ms, System: 597.0 ms]
  Range (min … max):   478.2 ms … 521.5 ms    25 runs

Benchmark 2: numactl -C 20-27 /t/lld1 -flavor gnu @response.txt --threads=8
  Time (mean ± σ):     520.9 ms ±   9.4 ms    [User: 628.9 ms, System: 650.1 ms]
  Range (min … max):   502.6 ms … 534.8 ms    25 runs

Summary
  'numactl -C 20-27 /t/lld0 -flavor gnu @response.txt --threads=8' ran
    1.06 ± 0.03 times faster than 'numactl -C 20-27 /t/lld1 -flavor gnu @response.txt --threads=8'
---
 lld/ELF/Driver.cpp            | 18 ++++++++++++------
 lld/ELF/SyntheticSections.cpp | 21 ---------------------
 lld/ELF/SyntheticSections.h   |  1 -
 3 files changed, 12 insertions(+), 28 deletions(-)

diff --git a/lld/ELF/Driver.cpp b/lld/ELF/Driver.cpp
index 4bb9b7a0b2a9..ffd80a522218 100644
--- a/lld/ELF/Driver.cpp
+++ b/lld/ELF/Driver.cpp
@@ -2901,17 +2901,26 @@ void LinkerDriver::link(opt::InputArgList &args) {
 
   {
     llvm::TimeTraceScope timeScope("Aggregate sections");
+    parallel::TaskGroup tg;
     // Now that we have a complete list of input files.
     // Beyond this point, no new files are added.
     // Aggregate all input sections into one place.
+    //
+    // Split SHF_MERGE and .eh_frame sections into pieces in preparation for
+    // garbage collection.
     for (InputFile *f : ctx.objectFiles) {
       for (InputSectionBase *s : f->getSections()) {
         if (!s || s == &InputSection::discarded)
           continue;
-        if (LLVM_UNLIKELY(isa<EhInputSection>(s)))
-          ctx.ehInputSections.push_back(cast<EhInputSection>(s));
-        else
+        if (LLVM_UNLIKELY(isa<EhInputSection>(s))) {
+          auto *eh = cast<EhInputSection>(s);
+          ctx.ehInputSections.push_back(eh);
+          tg.spawn([=] { invokeELFT(eh->split); });
+        } else {
           ctx.inputSections.push_back(s);
+          if (auto *ms = dyn_cast<MergeInputSection>(s))
+            tg.spawn([=] { ms->splitIntoPieces(); });
+        }
       }
     }
     for (BinaryFile *f : ctx.binaryFiles)
@@ -2982,9 +2991,6 @@ void LinkerDriver::link(opt::InputArgList &args) {
   if (!config->relocatable)
     ctx.inputSections.push_back(createCommentSection());
 
-  // Split SHF_MERGE and .eh_frame sections into pieces in preparation for garbage collection.
-  invokeELFT(splitSections,);
-
   // Garbage collection and removal of shared symbols from unused shared objects.
   invokeELFT(markLive,);
 
diff --git a/lld/ELF/SyntheticSections.cpp b/lld/ELF/SyntheticSections.cpp
index bada394aa30d..8fb44b5c379f 100644
--- a/lld/ELF/SyntheticSections.cpp
+++ b/lld/ELF/SyntheticSections.cpp
@@ -3330,22 +3330,6 @@ void MergeNoTailSection::finalizeContents() {
   });
 }
 
-template <class ELFT> void elf::splitSections() {
-  llvm::TimeTraceScope timeScope("Split sections");
-  // splitIntoPieces needs to be called on each MergeInputSection
-  // before calling finalizeContents().
-  parallelForEach(ctx.objectFiles, [](ELFFileBase *file) {
-    for (InputSectionBase *sec : file->getSections()) {
-      if (!sec)
-        continue;
-      if (auto *s = dyn_cast<MergeInputSection>(sec))
-        s->splitIntoPieces();
-      else if (auto *eh = dyn_cast<EhInputSection>(sec))
-        eh->split<ELFT>();
-    }
-  });
-}
-
 void elf::combineEhSections() {
   llvm::TimeTraceScope timeScope("Combine EH sections");
   for (EhInputSection *sec : ctx.ehInputSections) {
@@ -3993,11 +3977,6 @@ template GdbIndexSection *GdbIndexSection::create<ELF32BE>();
 template GdbIndexSection *GdbIndexSection::create<ELF64LE>();
 template GdbIndexSection *GdbIndexSection::create<ELF64BE>();
 
-template void elf::splitSections<ELF32LE>();
-template void elf::splitSections<ELF32BE>();
-template void elf::splitSections<ELF64LE>();
-template void elf::splitSections<ELF64BE>();
-
 template class elf::MipsAbiFlagsSection<ELF32LE>;
 template class elf::MipsAbiFlagsSection<ELF32BE>;
 template class elf::MipsAbiFlagsSection<ELF64LE>;
diff --git a/lld/ELF/SyntheticSections.h b/lld/ELF/SyntheticSections.h
index 7882ad87c241..1b556063ed71 100644
--- a/lld/ELF/SyntheticSections.h
+++ b/lld/ELF/SyntheticSections.h
@@ -1285,7 +1285,6 @@ private:
 
 InputSection *createInterpSection();
 MergeInputSection *createCommentSection();
-template <class ELFT> void splitSections();
 void combineEhSections();
 
 template <typename ELFT> void writeEhdr(uint8_t *buf, Partition &part);
